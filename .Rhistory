mutate(across(all_of(num_cols),
~ na_if(., "NA") %>% as.character() %>% gsub(",", "", .) %>% as.numeric()))
num_cols <- intersect(names(data), c("pm10_concentration","pm25_concentration","no2_concentration",
"pm10_tempcov","pm25_tempcov","no2_tempcov",
"population","latitude","longitude"))
data_clean <- data %>%
mutate(across(all_of(num_cols),
~ na_if(., "NA") %>% as.character() %>% gsub(",", "", .) %>% as.numeric()))
num_cols <- intersect(names(data), c("pm10_concentration","pm25_concentration","no2_concentration",
"pm10_tempcov","pm25_tempcov","no2_tempcov",
"population","latitude","longitude"))
data_clean <- data %>%
mutate(across(all_of(num_cols),
~ na_if(., "NA") %>% as.character() %>% gsub(",", "", .) %>% as.numeric()))
data_clean <- data %>%
mutate(across(all_of(num_cols),
~ na_if(., "NA") %>% as.character() %>% as.numeric()))
num_cols <- intersect(names(data), c("pm10_concentration","pm25_concentration","no2_concentration",
"pm10_tempcov","pm25_tempcov","no2_tempcov",
"population","latitude","longitude"))
data_clean <- data %>%
mutate(across(all_of(num_cols),
~ na_if(., "NA") %>% as.character() %>% gsub(",", "", .) %>% as.numeric()))
install.packages(c("readxl","dplyr","ggplot2","tidyr","GGally","broom","caret","patchwork","scales","janitor"))
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(GGally)
library(broom)
library(caret)
library(patchwork)
library(scales)
library(janitor)
data <- read_excel("C:\\Users\\admin\\OneDrive\\Desktop\\DPR\\who_ambient_air_quality_database_version_2024_(v6.1)ok.xlsx")
data <- data %>% janitor::clean_names()
glimpse(data)
head(data)
expected_cols <- c("pm10_concentration","pm25_concentration","no2_concentration",
"pm10_tempcov","pm25_tempcov","no2_tempcov",
"country_name","city","year","population","latitude","longitude")
num_cols <- intersect(names(data), c("pm10_concentration","pm25_concentration","no2_concentration",
"pm10_tempcov","pm25_tempcov","no2_tempcov",
"population","latitude","longitude"))
data_clean <- data %>%
mutate(across(all_of(num_cols),
~ na_if(., "NA") %>% as.character() %>% gsub(",", "", .) %>% as.numeric()))
data_clean <- data %>%
mutate(across(all_of(num_cols),
~ na_if(., "NA") %>% as.character() %>% gsub(",", "", .) %>% as.numeric()))
pollutants <- data %>%
select(country_name ,city , year,pm25_concentration ,pm10_tempcov , `NO2`, `SO2`, `O3`)
library(rvest)
library(dplyr)
library(stringr)
session <- bow(
url="https://www.scrapethissite.com/pages/simple/"
)
library(rvest)
library(dplyr)
library(stringr)
url="https://www.scrapethissite.com/pages/simple/"
library(rvest)
library(dplyr)
library(stringr)
url="https://www.scrapethissite.com/pages/simple/"
session2<- bow( url="https://www.scrapethissite.com/pages/simple/")
headlines <- page %>%
html_elements("h3, h2") %>%
html_text2() %>%
str_squish() %>%
unique()
headlines <- page %>%
html_elements("h3, h2") %>%      # Headline tags typically used on the BBC site
html_text2() %>%
str_squish() %>%
unique()
library(rvest)
library(dplyr)
library(stringr)
url="https://www.scrapethissite.com/pages/simple/"
page <- read_html(url)
headlines <- page %>%
html_elements("h3, h2") %>%      # Headline tags typically used on the BBC site
html_text2() %>%
str_squish() %>%
unique()
head(headlines, 10)
data{
data(
"country"=country ,
"population"=population
)
df=pd.DataFrame(data)
country=headlines
population=1,2,3,4,5,6,7,8,9,10
country=headlines
population=1234567890
data(
"country"=country ,
"population"=population
)
df=pd.DataFrame(data)
df=data.frame(
"country"=headlines,
"population"=population
)
df
df=data.frame(
"country"=headlines,
"population"=123456789
)
df
df=data.frame(
"country"=headlines,
"population"=1,2,3,4,5,6
)
df
library(rvest)
library(dplyr)
library(stringr)
url <- "https://www.scrapethissite.com/pages/forms/"
page <- read_html(url)
# Locate the table node(s). Inspecting the HTML shows there's a table
# (or tabular layout) containing the team stats.
# Let’s assume there is a <table> element; if not, one can use CSS selectors
# to pick up rows/tr elements.
tbl <- page %>%
html_element("table")    # or a more specific selector if necessary
if (is.null(tbl)) {
stop("No <table> element found on the page. Inspect HTML for correct selector.")
}
# Convert to a data frame
df <- tbl %>%
html_table(fill = TRUE)
# Clean / inspect the first few rows
df <- df %>%
mutate(across(everything(), str_squish))
head(df, 10)
library(rvest)
library(dplyr)
library(stringr)
url <- "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
page <- read_html(url)
# Locate the table node(s). Inspecting the HTML shows there's a table
# (or tabular layout) containing the team stats.
# Let’s assume there is a <table> element; if not, one can use CSS selectors
# to pick up rows/tr elements.
tbl <- page %>%
html_element("table")    # or a more specific selector if necessary
if (is.null(tbl)) {
stop("No <table> element found on the page. Inspect HTML for correct selector.")
}
# Convert to a data frame
df <- tbl %>%
html_table(fill = TRUE)
# Clean / inspect the first few rows
df <- df %>%
mutate(across(everything(), str_squish))
head(df, 10)
iris_data <- load("iris")
iris_data <- data("iris")
head(iris_data)
data("iris")
head(iris)
data(iris)
head(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color=Species)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Clusters by Sepal Measurements",
x = "Sepal Length",
y = "Sepal Width") +
theme_minimal()
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color=Species)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Clusters by Sepal Measurements",
x = "Sepal Length",
y = "Sepal Width") +
theme_minimal()
iris_data <- scale(iris[, 1:4])
iris_data
set.seed(42)
iris_clusters <- kmeans(iris_data, centers = 3)
# View the cluster assignments for the first few rows
head(iris_clusters$cluster)
iris_data <- scale(iris[, 1:4])
iris_data
set.seed(42)
iris_clusters <- kmeans(iris_data, centers = 3)
# View the cluster assignments for the first few rows
head(iris_clusters$cluster)
data_clean <- data %>%
mutate(across(all_of(num_cols),
~ na_if(., "NA") %>% as.character() %>% gsub(",", "", .) %>% as.numeric()))
install.packages(c("readxl","dplyr","ggplot2","tidyr","GGally","broom","caret","patchwork","scales","janitor"))
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(GGally)
library(broom)
library(caret)
library(patchwork)
library(scales)
library(janitor)
data <- read_excel("C:\\Users\\admin\\OneDrive\\Desktop\\DPR\\who_ambient_air_quality_database_version_2024_(v6.1)ok.xlsx")
data <- data %>% janitor::clean_names()
glimpse(data)
head(data)
head(data)
pm2_candidates <- colnames(data)[str_detect(tolower(colnames(data)), "pm2|pm_2|pm25")]
colnames(data)
pm2_candidates <- colnames(data)[str_detect(tolower(colnames(data)), "pm2|pm_2|pm25")]
library(tidyverse)
pm2_candidates <- colnames(data)[str_detect(tolower(colnames(data)), "pm2|pm_2|pm25")]
pm10_candidates <- colnames(data)[str_detect(tolower(colnames(data)), "pm10|pm_10")]
pm25_col <- pm2_candidates[1]
pm10_col <- pm10_candidates[1]
df <- data %>%
mutate(
PM25 = parse_number(as.character(.data[[pm25_col]])),
PM10 = parse_number(as.character(.data[[pm10_col]]))
) %>%
filter(!is.na(PM25) & !is.na(PM10))
df <- data %>%
mutate(
PM25 = parse_number(as.character(.data[[pm25_col]])),
PM10 = parse_number(as.character(.data[[pm10_col]]))
) %>%
filter(!is.na(PM25) & !is.na(PM10))
df
colSums(is.na(df_raw))
colSums(is.na(data))
df <- data %>%
mutate(
PM25 = parse_number(as.character(.data[[pm25_col]])),
PM10 = parse_number(as.character(.data[[pm10_col]]))
) %>%
filter(!is.na(PM25) & !is.na(PM10))
df
df %>%
summarize(
n = n(),
PM25_mean = mean(PM25, na.rm = TRUE),
PM10_mean = mean(PM10, na.rm = TRUE),
PM25_median = median(PM25, na.rm = TRUE),
PM10_median = median(PM10, na.rm = TRUE)
)
ggplot(df, aes(x = PM10, y = PM25)) +
geom_point(alpha = 0.4, color = "#2c7fb8") +
geom_smooth(method = "lm", se = TRUE, color = "#d95f0e") +
labs(
title = "Scatter Plot: PM2.5 vs PM10",
subtitle = "Linear regression fit with 95% confidence interval",
x = "PM10 (µg/m³)",
y = "PM2.5 (µg/m³)"
) +
theme_minimal()
install.packages(c("readxl","dplyr","ggplot2","tidyr","GGally","broom","caret","patchwork","scales","janitor"))
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(GGally)
library(broom)
library(caret)
library(patchwork)
library(scales)
library(janitor)
data <- read_excel("C:\\Users\\admin\\OneDrive\\Desktop\\DPR\\who_ambient_air_quality_database_version_2024_(v6.1)ok.xlsx")
colnames(data)
glimpse(data)
head(data)
colSums(is.na(data))
library(tidyverse)
pm2_candidates <- colnames(data)[str_detect(tolower(colnames(data)), "pm2|pm_2|pm25")]
pm10_candidates <- colnames(data)[str_detect(tolower(colnames(data)), "pm10|pm_10")]
pm25_col <- pm2_candidates[1]
pm10_col <- pm10_candidates[1]
df <- data %>%
mutate(
PM25 = parse_number(as.character(.data[[pm25_col]])),
PM10 = parse_number(as.character(.data[[pm10_col]]))
) %>%
filter(!is.na(PM25) & !is.na(PM10))
df
df %>%
summarize(
n = n(),
PM25_mean = mean(PM25, na.rm = TRUE),
PM10_mean = mean(PM10, na.rm = TRUE),
PM25_median = median(PM25, na.rm = TRUE),
PM10_median = median(PM10, na.rm = TRUE)
)
ggplot(df, aes(x = PM10, y = PM25)) +
geom_point(alpha = 0.4, color = "#2c7fb8") +
geom_smooth(method = "lm", se = TRUE, color = "#d95f0e") +
labs(
title = "Scatter Plot: PM2.5 vs PM10",
subtitle = "Linear regression fit with 95% confidence interval",
x = "PM10 (µg/m³)",
y = "PM2.5 (µg/m³)"
) +
theme_minimal()
install.packages(c("readxl","dplyr","ggplot2","tidyr","GGally","broom","caret","patchwork","scales","janitor"))
data("diamonds")
data(diamonds)
data(diamonds)
data("diamonds")
install.packages("diamonds")
data("diamonds")
data(diamonds)
data(diamonds)
library(ggplot2)
data(diamonds)
data(iris)
head(diamonds)
ggplot(diamonds, aes(x = price, y = carat, color=Species)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Clusters by Sepal Measurements",
x = "price",
y = "carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color=Species)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Clusters by price",
x = "price",
y = "carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 2, alpha = 0.7) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 0.5, alpha = 0.7) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 10, alpha = 0.7) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 0.2, alpha = 0.7) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 2, alpha = 0.2) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 2, alpha = 1) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 2, alpha = 5) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 3, alpha = 0.5) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
set.seed(123)
train_index <- sample(1:nrow(diamonds), 0.7 * nrow(diamonds))
train_data <- diamonds[train_index, ]
test_data  <- diamonds[-train_index, ]
set.seed(123)
train_index <- sample(1:nrow(diamonds), 0.7 * nrow(diamonds))
train_data <- diamonds[train_index, ]
test_data  <- diamonds[-train_index, ]
model <- lm(price ~ carat, data = train_data)
model <- lm(price ~ carat, data = train_data)
summary(model)
predictions <- predict(model, newdata = test_data)
head(predictions)
rmse_value <- rmse(test_data$price, predictions)
rmse_value <- sqrt(mean((test_data$price - predictions)^2))
rmse_value
ggplot(train_data, aes(x = carat, y = price)) +
geom_point(alpha = 0.4, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
labs(title = "Linear Regression: Price vs Carat",
x = "Carat", y = "Price") +
theme_minimal()
library(ggplot2)
ggplot(train_data, aes(x = carat, y = price)) +
geom_point(alpha = 0.4, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
labs(title = "Linear Regression: Price vs Carat",
x = "Carat", y = "Price") +
theme_minimal()
set.seed(42)
iris_clusters <- kmeans(iris_data, centers = 3)
# View the cluster assignments for the first few rows
head(iris_clusters$cluster)
library(ggplot2)
data(diamonds)
head(diamonds)
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_point(size = 3, alpha = 0.5) +
labs(title = "Diamond Price vs Carat by Cut",
x = "Price", y = "Carat") +
theme_minimal()
set.seed(123)
train_index <- sample(1:nrow(diamonds), 0.7 * nrow(diamonds))
train_data <- diamonds[train_index, ]
test_data  <- diamonds[-train_index, ]
model <- lm(price ~ carat, data = train_data)
summary(model)
predictions <- predict(model, newdata = test_data)
head(predictions)
rmse_value <- sqrt(mean((test_data$price - predictions)^2))
rmse_value
ggplot(train_data, aes(x = carat, y = price)) +
geom_point(alpha = 0.4, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
labs(title = "Linear Regression: Price vs Carat",
x = "Carat", y = "Price") +
theme_minimal()
install.packages(c("readxl","dplyr","ggplot2","tidyr","GGally","broom","caret","patchwork","scales","janitor"))
library(readxl)    # To read Excel files (.xlsx)
library(dplyr)     # For data manipulation (filter, select, summarize, etc.)
library(ggplot2)   # For creating data visualizations (graphs, plots)
library(tidyr)     # For reshaping and tidying data
library(GGally)    # Adds extra ggplot2 features (like pair plots)
library(broom)     # Converts model outputs into tidy data frames
library(caret)     # For machine learning and model training
library(patchwork) # To combine multiple ggplot2 charts
library(scales)    # For controlling scales and labels in plots
library(janitor)   # For cleaning data (fixing column names, removing empty rows, etc.)
data <- read_excel("C:\\Users\\admin\\OneDrive\\Desktop\\DPR\\who_ambient_air_quality_database_version_2024_(v6.1)ok.xlsx")
colnames(data)  # show the column names of the data frame called data.
glimpse(data)
head(data)
colSums(is.na(data))
data$year[is.na(data$year)] <- mean(data$year, na.rm = TRUE)
colSums(is.na(data))
library(tidyverse)
pm2_candidates <- colnames(data)[str_detect(tolower(colnames(data)), "pm2|pm_2|pm25")] #Get all column names/Convert to lowercase/Detect PM2.5 column(s)
pm10_candidates <- colnames(data)[str_detect(tolower(colnames(data)), "pm10|pm_10")]
pm25_col <- pm2_candidates[1] #Store PM2.5 column name
pm10_col <- pm10_candidates[1]
df <- data %>%
mutate(
PM25 = parse_number(as.character(.data[[pm25_col]])), #Create two new columns (PM25 and PM10) in clean numeric format.
PM10 = parse_number(as.character(.data[[pm10_col]]))
) %>%
filter(!is.na(PM25) & !is.na(PM10)) #Keep only rows that have both PM2.5 and PM10 values.
df
df %>%
summarize(
n = n(),    #Counts the number of rows in the dataset.
PM25_mean = mean(PM25, na.rm = TRUE), #Calculates the mean (average) of PM2.5 and PM10.
PM10_mean = mean(PM10, na.rm = TRUE),
PM25_median = median(PM25, na.rm = TRUE), #Calculates the median of PM2.5 and PM10.
PM10_median = median(PM10, na.rm = TRUE)
) #🔹 na.rm = TRUE → Ignores missing (NA) values when doing the calculations.
ggplot(df, aes(x = PM10, y = PM25)) +
geom_point(alpha = 0.4, color = "#2c7fb8") +
geom_smooth(method = "lm", se = TRUE, color = "#d95f0e") +
labs(
title = "Scatter Plot: PM2.5 vs PM10",
subtitle = "Linear regression fit with 95% confidence interval",
x = "PM10 (µg/m³)",
y = "PM2.5 (µg/m³)"
) +
theme_minimal() #Applies a clean minimal theme
cor_test <- cor.test(df$PM10, df$PM25, method = "pearson")
tidy(cor_test)
lm_fit <- lm(PM25 ~ PM10, data = df)
summary(lm_fit)
glance(lm_fit)
install.packages("ggpmisc")
install.packages("ggpubr")
library(ggplot2)
library(ggpmisc)
ggplot(df, aes(x = PM10, y = PM25)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = TRUE, color = "#e41a1c") +
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x = 0.1, label.y = max(df$PM25, na.rm = TRUE)*0.9,
formula = y ~ x, parse = TRUE, size = 4, color = "blue") +
labs(
title = "Linear Regression: PM2.5 ~ PM10",
x = "PM10 (µg/m³)",
y = "PM2.5 (µg/m³)"
) +
theme_light()
par(mfrow = c(2,2))
plot(lm_fit)
par(mfrow = c(1,1))
library(caret)
set.seed(42)
train_control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
caret_lm <- train(PM25 ~ PM10,
data = df,
method = "lm",
trControl = train_control)
caret_lm$results
